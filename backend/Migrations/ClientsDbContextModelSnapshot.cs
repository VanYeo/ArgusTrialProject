// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ClientsDbContext))]
    partial class ClientsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a48cf44b-9195-469c-bf21-3bbb26eaaadb",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA7yR1I2/Lp0vjphUYI/lkgSdPSgrojoBo0RvR4o/SFj5hdtTDkLtHKoV4beeo1Djw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "670c1012-8318-49ae-a487-82d2d948b221",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83dc0ddb-1512-481b-b678-6ffd556f95c8",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIhS23kmZMnBzfcBmD2RxI2abd1OrqxVkvLTiCVu+rPmo4guTyeDiTvS55GxBLoqaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf2e8f02-4659-41cb-bda3-c76ebf528395",
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backend.Entities.AccountDetail", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("integer");

                    b.Property<string>("AccountEmail")
                        .HasColumnType("text");

                    b.Property<string>("AccountManager")
                        .HasColumnType("text");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountPhone")
                        .HasColumnType("text");

                    b.Property<string>("EmailBillTo")
                        .HasColumnType("text");

                    b.HasKey("ClientID");

                    b.ToTable("AccountDetail");
                });

            modelBuilder.Entity("backend.Entities.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressID"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("ClientID")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Zip")
                        .HasColumnType("text");

                    b.HasKey("AddressID");

                    b.HasIndex("ClientID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("backend.Entities.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientID"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Connections")
                        .HasColumnType("integer");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<int?>("ContractTermMonths")
                        .HasColumnType("integer");

                    b.Property<string>("ContractType")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TradingName")
                        .HasColumnType("text");

                    b.HasKey("ClientID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("backend.Entities.ClientIntegrations", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("integer");

                    b.Property<bool>("APIKey")
                        .HasColumnType("boolean");

                    b.Property<bool>("PVBSClient")
                        .HasColumnType("boolean");

                    b.Property<bool>("SOSEventPush")
                        .HasColumnType("boolean");

                    b.Property<bool>("SSO")
                        .HasColumnType("boolean");

                    b.Property<bool>("VWorkClient")
                        .HasColumnType("boolean");

                    b.HasKey("ClientID");

                    b.ToTable("ClientIntegrations");
                });

            modelBuilder.Entity("backend.Entities.ClientOptions", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("integer");

                    b.Property<bool>("ActiveAccount")
                        .HasColumnType("boolean");

                    b.Property<bool>("BillingCSV")
                        .HasColumnType("boolean");

                    b.Property<bool>("EJobsClient")
                        .HasColumnType("boolean");

                    b.Property<bool>("GOG")
                        .HasColumnType("boolean");

                    b.Property<bool>("MasterAccount")
                        .HasColumnType("boolean");

                    b.HasKey("ClientID");

                    b.ToTable("ClientOptions");
                });

            modelBuilder.Entity("backend.Entities.ClientPlugins", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("integer");

                    b.Property<bool>("CustomBranding")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendMessage")
                        .HasColumnType("boolean");

                    b.Property<bool>("SmartRenew")
                        .HasColumnType("boolean");

                    b.HasKey("ClientID");

                    b.ToTable("ClientPlugins");
                });

            modelBuilder.Entity("backend.Entities.DefaultPlans", b =>
                {
                    b.Property<int>("ClientID")
                        .HasColumnType("integer");

                    b.Property<bool>("AssignPPToAllAULS")
                        .HasColumnType("boolean");

                    b.Property<string>("IoTPlan")
                        .HasColumnType("text");

                    b.Property<bool>("IsNonBillingAccount")
                        .HasColumnType("boolean");

                    b.Property<string>("RoadRedPlan")
                        .HasColumnType("text");

                    b.Property<bool>("RolloverAgreement")
                        .HasColumnType("boolean");

                    b.Property<string>("SoftwarePlan")
                        .HasColumnType("text");

                    b.HasKey("ClientID");

                    b.ToTable("DefaultPlans");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Entities.AccountDetail", b =>
                {
                    b.HasOne("backend.Entities.Client", "Client")
                        .WithOne("AccountDetail")
                        .HasForeignKey("backend.Entities.AccountDetail", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("backend.Entities.Address", b =>
                {
                    b.HasOne("backend.Entities.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("backend.Entities.ClientIntegrations", b =>
                {
                    b.HasOne("backend.Entities.Client", "Client")
                        .WithOne("Integrations")
                        .HasForeignKey("backend.Entities.ClientIntegrations", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("backend.Entities.ClientOptions", b =>
                {
                    b.HasOne("backend.Entities.Client", "Client")
                        .WithOne("Options")
                        .HasForeignKey("backend.Entities.ClientOptions", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("backend.Entities.ClientPlugins", b =>
                {
                    b.HasOne("backend.Entities.Client", "Client")
                        .WithOne("Plugins")
                        .HasForeignKey("backend.Entities.ClientPlugins", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("backend.Entities.DefaultPlans", b =>
                {
                    b.HasOne("backend.Entities.Client", "Client")
                        .WithOne("Plans")
                        .HasForeignKey("backend.Entities.DefaultPlans", "ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("backend.Entities.Client", b =>
                {
                    b.Navigation("AccountDetail");

                    b.Navigation("Addresses");

                    b.Navigation("Integrations");

                    b.Navigation("Options");

                    b.Navigation("Plans");

                    b.Navigation("Plugins");
                });
#pragma warning restore 612, 618
        }
    }
}
